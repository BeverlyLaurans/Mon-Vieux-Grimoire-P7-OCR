const Book = require('../models/Book');

exports.getAllBooks = (req, res, next) => {
    Book.find().then(
      (books) => {
        res.status(200).json(books);
      }
    ).catch(
      (error) => {
        res.status(400).json({
          error: error
        });
      }
    );
  };

exports.getOneBook = (req, res, next) => {
Book.findOne({
    _id: req.params.id
}).then(
    (book) => {
    res.status(200).json(book);
    }
).catch(
    (error) => {
    res.status(404).json({
        error: error
    });
    }
);
};

// exports.findBestrating = (req, res, next) => {
//     Book.find()
//       .then(books => res.status(200).json(books))
//       .catch(error => res.status(404).json({ error }));
// };

exports.createBook = (req, res, next) => {
    console.log(req.body.userId);
    console.log(req.body.title);
    console.log(req.body.author);
    console.log(req.body.imageUrl);
    console.log(req.body.year);
    console.log(req.body.genre);
    console.log(req.body.ratings);
    console.log(req.body.ratings.userId);
    console.log(req.body.ratings.grade);
    console.log(req.body.averageRating);
  const book = new Book({
    userId: req.body.userId,
    title: req.body.title,
    author: req.body.author,
    imageUrl: req.body.imageUrl,
    year: req.body.year,
    genre: req.body.genre,
    ratings: [
        {
            userId: req.body.userId,
            grade: req.body.grade
        }
    ],
    averageRating: req.body.averageRating
  });
  console.log(book);
  book.save().then(
    () => {
        console.log("Book saved successfully!");
      res.status(201).json({
        message: 'Post saved successfully!'
      });
    }
  ).catch(
    (error) => {
        console.log('Error saving book:', error);
      res.status(400).json({
        error: error
      });
    }
  );
};

// exports.createBook = (req, res, next) => {
//     const bookObject = JSON.parse(req.body.book);
//     delete bookObject._id;
//     delete bookObject._userId;
//     const book = new Book({
//         ...bookObject,
//         userId: req.auth.userId,
//         imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`
//     });
  
//     book.save()
//     .then(() => { res.status(201).json({message: 'Objet enregistré !'})})
//     .catch(error => { res.status(400).json( { error })})
//  };

exports.modifyBook = (req, res, next) => {
  const book = new Book({
    _id: req.params.id,
    userId: req.body.userId,
    title: req.body.title,
    author: req.body.author,
    imageUrl: req.body.imageUrl,
    year: req.body.year,
    genre: req.body.genre,
    ratings: [
        {
            userId: req.body.userId,
            grade: req.body.grade
        }
    ],
    averageRating: req.body.averageRating
  });
  Book.updateOne({_id: req.params.id}, book).then(
    () => {
      res.status(201).json({
        message: 'Book updated successfully!'
      });
    }
  ).catch(
    (error) => {
      res.status(400).json({
        error: error
      });
    }
  );
};

// exports.updateBook = (req, res, next) => {
//     const bookObject = req.file ? {
//         ...JSON.parse(req.body.book),
//         imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`
//     } : { ...req.body };
  
//     delete bookObject._userId;
//     Book.findOne({_id: req.params.id})
//         .then((book) => {
//             if (book.userId != req.auth.userId) {
//                 res.status(401).json({ message : 'Not authorized'});
//             } else {
//                 Book.updateOne({ _id: req.params.id}, { ...bookObject, _id: req.params.id})
//                 .then(() => res.status(200).json({message : 'Livre modifié!'}))
//                 .catch(error => res.status(401).json({ error }));
//             }
//         })
//         .catch((error) => {
//             res.status(400).json({ error });
//         });
//   };

exports.deleteBook = (req, res, next) => {
  Book.deleteOne({_id: req.params.id}).then(
    () => {
      res.status(200).json({
        message: 'Deleted!'
      });
    }
  ).catch(
    (error) => {
      res.status(400).json({
        error: error
      });
    }
  );
};

// exports.deleteBook = (req, res, next) => {
//     Book.findOne({ _id: req.params.id})
//     .then(book => {
//         if (book.userId != req.auth.userId) {
//             res.status(401).json({message: 'Not authorized'});
//         } else {
//             const filename = book.imageUrl.split('/images/')[1];
//             fs.unlink(`images/${filename}`, () => {
//                 Book.deleteOne({_id: req.params.id})
//                     .then(() => { res.status(200).json({message: 'Livre supprimé !'})})
//                     .catch(error => res.status(401).json({ error }));
//             });
//         }
//     })
//     .catch( error => {
//         res.status(500).json({ error });
//     });
// };

// exports.createRating = (req, res, next) => {
//     delete req.body._id;
//     const book = new Book({
//     ...req.body
//   });
//   book.save()
//     .then(() => res.status(201).json({ message: "Note enregistré !"}))
//     .catch(error => res.status(400).json({ error }));
// };